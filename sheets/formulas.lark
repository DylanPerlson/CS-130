//=============================================================================
// Caltech CS130 - Winter 2022

%import common.WS
%ignore WS

//========================================
// Top-level formulas and expressions

?formula : "=" expression

?expression : add_expr | concat_expr | bool_func | bool // (bool_func, bool are new)

//========================================
// Arithmetic expressions

// This generates right-deep trees:  ?add_expr : mul_expr (ADD_OP add_expr)?
// Instead we would prefer to generate left-deep trees when given a sequence
// of operators at the same precedence level.
?add_expr : (add_expr ADD_OP)? mul_expr

?mul_expr : (mul_expr MUL_OP)? unary_op

?unary_op : ADD_OP? base

//========================================
// (new) Boolean expressions

?bool_func : BOOL_FUNC "(" [ base ["," (base)]* ] ")"
      // | BOOL_FUNC_1 "(" [ bool ] ")"
      // | BOOL_FUNC_2 "(" [ bool "," bool ] ")"

?bool_oper : expression BOOL_OP expression // bool oper takes lowest precedence

?bool : BOOL_LIT -> bool_lit
      | bool_func
      | bool_oper
      // | base

//========================================
// String concatenation

?concat_expr : (concat_expr "&")? base

//========================================
// Base values

?base : cell
      | ERROR_VALUE             -> error
      | NUMBER                  -> number
      | STRING                  -> string
      | "(" expression ")"      -> parens
      | bool // (new)

cell : (_sheetname "!")? CELLREF

_sheetname : SHEET_NAME | QUOTED_SHEET_NAME

//========================================
// Lexer terminals

// Specify the operators as separately named lexer rules so that they aren't
// discarded from the resulting parse tree.

ADD_OP: ("+" | "-")
MUL_OP: ("*" | "/")

// Error values are also separately named lexer rules so we know what kind of
// error is referenced.  All are case-insensitive.

ERROR_VALUE: ("#ERROR!"i | "#CIRCREF!"i | "#REF!"i | "#NAME?"i | "#VALUE!"i | "#DIV/0!"i)

// Lexer rules for different kinds of terminals

CELLREF: /[$]?[A-Za-z]+[$]?[1-9][0-9]*/

// Unquoted sheet names cannot contain spaces, and are otherwise very simple.
SHEET_NAME: /[A-Za-z_][A-Za-z0-9_]*/

// Quoted sheet names can contain spaces and other interesting characters.  Note
// that this lexer rule also matches invalid sheet names, but that isn't a big
// deal here.
QUOTED_SHEET_NAME: /\'[^']*\'/

// Don't need to support signs on numbers because we have unary +/- operator
// support in the parser.
NUMBER: /([0-9]+(\.[0-9]*)?)|(\.[0-9]+)/

STRING: /\"[^"]*\"/

// (new) This is supposed to add boolean functions (and, or, etc.)
BOOL_FUNC: /[A-Za-z_][A-Za-z0-9_]*/ // TODO check whether this supports everything
// ("AND" | "OR" | "XOR")
// BOOL_FUNC_1: ("NOT" | "ISBLANK" | "ISERROR")
// BOOL_FUNC_2: ("EXACT")

// (new) This is supposed to add a boolean as a type (case insensitive)
// BOOL: (BOOL_LIT | bool_func)
BOOL_LIT: ("true"i | "false"i)

// (new) this is supposed to add boolean operators (=, <, >, etc.)
BOOL_OP: ("=" | "==" | "<>" | "!=" | ">" | "<" | ">=" | "<=")